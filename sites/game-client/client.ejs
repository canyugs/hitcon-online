<!doctype html>
<!--
Copyright 2021 HITCON Online Contributors
SPDX-License-Identifier: BSD-2-Clause
-->

<!--
NOTE: The URL of this page is /client.html
It is recommended that all references various resources be in
absolute URL.
-->

<html lang="zh-tw">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>HITCON Online</title>
    <link rel="stylesheet" href="/static/sites/game-client/client.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="/static/sites/game-client/misc.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
  </head>
  <body>
    <div id="rootdiv" class="container-center">
      <% inDiv.forEach((i) => { %>
        <%- include(i); %>
      <% }); %>
      <canvas id="mapcanvas"></canvas>
    </div>

    <script type="module">
      import GameMap from '/static/common/maplib/map.mjs';
      import GraphicAsset from '/static/common/maplib/graphic-asset.mjs';
      import GameState from '/static/common/maplib/game-state.mjs';
      import GameClient from '/static/sites/game-client/game-client.mjs';
      import MapRenderer from '/static/sites/game-client/map-renderer.mjs';
      import InputManager from '/static/sites/game-client/input-manager.mjs';
      import { GameMapMock } from '/static/common/maplib/map.mjs'; // only used before GameMap is fully implemented
      import ClientExtensionManager from '/static/common/extlib/client-extension-manager.mjs';

      // Export internal classes for ease of debugging.
      let gameClass = {};
      gameClass.GameMap = GameMap;
      gameClass.GraphicAsset = GraphicAsset;
      gameClass.GameState = GameState;
      gameClass.GameClient = GameClient;
      gameClass.ClientExtensionManager = ClientExtensionManager;
      window.gameClass = gameClass;

      // Create the various essential game classes.
      let game = {};
      window.game = game;

      function getTokenFromDocument() {
        try {
          const token = document.cookie
              .split('; ').find(row => row.startsWith('token='))
              .split('=')[1];
          return token;
        } catch (e) {
          return '';
        }
      }

      async function gameMain(game) {
        game.io = window.io;

        // WARNING: The following is developer mode only.
        // Try to get a test token.
        let testToken = getTokenFromDocument();
        if (testToken == '') {
          testToken = await $.ajax({url: "/get_test_token", type: "GET",});
          testToken = testToken.token;
        }
        game.token = testToken;

        // TODO: Change map URL to follow the config in server side.
        game.mapData = await $.ajax({url: "/static/run/map/map.json", type: "GET",});
        game.assetData = await $.ajax({url: "/static/run/map/assets.json", type: "GET",});
        game.extensionList = await $.ajax({url: "/list_extensions", type: "GET",});

        game.graphicAsset = new GraphicAsset(game.assetData);
        if (await game.graphicAsset.loadAssets() == false) {
          console.error('error on loadAssets(), cannot start game');
          return;
        }
        game.map = new GameMap(game.graphicAsset, game.mapData);
        game.gameState = new GameState(game.map);
        game.socket = game.io({reconnection: false});

        game.extMan = new ClientExtensionManager(game.socket, game.extensionList);
        await game.extMan.initialize(game.map, game.gameState);
        await game.extMan.loadAllExtensionClient();

        game.mapRenderer = new MapRenderer(document.querySelector('#mapcanvas'), game.map, game.gameState);
        game.inputManager = new InputManager(game.mapRenderer);
        game.gameClient = new GameClient(game.socket, game.gameState, game.mapRenderer, game.inputManager, game.extMan); // bug

        game.gameClient.initialize(game.token);
        game.mapRenderer.setGameClient(game.gameClient);

        function onGameTick () {
          game.mapRenderer.draw();
          requestAnimationFrame(onGameTick);
        }

        requestAnimationFrame(onGameTick);
      }

      gameMain(game);

    </script>
  </body>
</html>
