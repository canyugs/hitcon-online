<!doctype html>
<!--
Copyright 2021 HITCON Online Contributors
SPDX-License-Identifier: BSD-2-Clause
-->

<!--
NOTE: The URL of this page is /client.html
It is recommended that all references various resources be in
absolute URL.
-->

<html lang="zh-tw">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>HITCON Online</title>
    <link rel="stylesheet" href="/static/sites/game-client/client.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.2/socket.io.min.js" integrity="sha512-2ho+gY0H62N4Z9oxD422L2ZYXiOMq9l+Aub1QNz4Z4UDOtDVxz4vk6O6R3Hqqc9Y7qSvZFl7cy3+eZ/ITnUrLA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
  </head>
  <body>
    <div id="rootdiv" class="container-center">
      <div id="staging-div">
        <!--
        This div is for stuff that's not yet being displayed.
        It is currently semi-transparent for debugging purpose.
        -->
        <div id="map-render-overlay" class="container-center">
          <canvas id="mapcanvas"></canvas>
        </div>
        <div id="error-modal">
          <div>
            <img src="/static/sites/game-client/warning.svg" alt="">
            <p id="error-message"></p>
          </div>
          <p id="error-handler-message"></p>
        </div>
        <% inDiv.forEach((i) => { %>
          <%- include(i); %>
        <% }); %>
      </div>

      <div class="notification notification--overlay notification--inactive" id="notification">
        <div class="notification-type">遊戲通知</div>
        <div class="notification-text" id="notification-text"></div>
        <div class="notification-progress-bar" id="notification-progress-bar">
          <span style="width: 100%" id="notification-progress-bar-inner"></span>
        </div>
      </div>

      <div class="announcement announcement--overlay announcement--inactive" id="announcement">
        <div class="announcement-type">公告類別</div>
        <div class="announcement-gap"></div>
        <div class="announcement-marquee-container">
          <span class="announcement-marquee-inner announcement-text" id="announcement-text"></span>
        </div>
        <button class="announcement-close">X</button>
      </div>

      <!-- TODO add `collapse` in class toggle style for child element (close toolbar)-->
      <div class="utilpanel utilpanel--overlay" id="utilpanel">
        <div class="utilpanel-tabs" id="utilpanel-tabs">
          <label class="utilpanel-button">
            <input type="radio" name="utilpanel" value="example" class="utilpanel-radio" />
            <div><img src="/static/sites/game-client/settings.svg"></div>
          </label>
        </div>
        <button class="utilpanel-divider" id="utilpanel-divider">
          <span class="utilpanel-divider"><img src="/static/sites/game-client/triangle.svg"></span>
        </button>
       <div class="utilpanel-content" id="utilpanel-content">
        <div>
        <div class="utilpanel-viewer">setup information</div>
        <div class="utilpanel-actions">setup action here</div>
        </div>
       </div>
      </div>

      <div id="overlay-topleft" class="overlay overlay--inactive"></div>
      <div id="overlay-bottomleft" class="overlay overlay--inactive"></div>
      <div id="overlay-right" class="overlay overlay--inactive"></div>
      <div id="overlay-centertop" class="overlay overlay--inactive"></div>
      <div id="main-view"></div>
      <!-- used to block out the rest of the stuffs when model is visible -->
      <div id="modal-background" class="modal-background"></div>
      <div id="modal-container" class="modal-container"></div>

      <!-- context menu -->
      <div class="context-menu" id="context-menu-other">
        <div class="context-menu-user">
          <img class="context-menu-picture" src="https://via.placeholder.com/56x61">
          <div class="context-menu-user-info">
            <div class="context-menu-user-name" id="context-menu-other-name"></div>
            <div class="context-menu-user-role" id="context-menu-other-role"></div>
          </div>
        </div>
        <div class="context-menu-actions" id="context-menu-other-actions"></div>
      </div>

      <div class="context-menu" id="context-menu-self">
        <div class="context-menu-user">
          <img class="context-menu-picture" src="https://via.placeholder.com/56x61">
          <div class="context-menu-user-info">
            <div class="context-menu-user-name" id="context-menu-self-name"></div>
            <div class="context-menu-user-role" id="context-menu-self-role"></div>
          </div>
        </div>
        <div class="context-menu-actions" id="context-menu-self-actions"></div>
      </div>

      <!-- User overlay -->
      <div class="user user--overlay">
        <div class="user-profile">
          <div class="user-name">eevee</div>
          <div class="user-points">
            <span class="user-point" id="user-point">9999</span>
            <span class="user-point-unit">P</span>
          </div>
        </div>
        <div class="user-actions">
          <button class="user-action" id="jitsi-microphone">
            <img src="" alt="microphone">
          </button>
          <button class="user-action" id="jitsi-camera">
            <img src="" alt="video">
          </button>
          <button class="user-action" id="jitsi-screen">
            <img src="" alt="screen">
          </button>
        </div>
      </div>
    </div>

    <script type="module">
      import GameMap from '/static/common/maplib/map.mjs';
      import GraphicAsset from '/static/common/maplib/graphic-asset.mjs';
      import GameState from '/static/common/gamelib/game-state.mjs';
      import GameClient from '/static/sites/game-client/game-client.mjs';
      import MapRenderer from '/static/sites/game-client/map-renderer.mjs';
      import InputManager from '/static/sites/game-client/input-manager.mjs';
      import ClientExtensionManager from '/static/common/extlib/client-extension-manager.mjs';
      import MainUI from '/static/sites/game-client/ui/main-ui.mjs';
      import MapRendererOverlay from '/static/sites/game-client/ui/map-renderer-overlay.mjs';
      import OverlayPosition from '/static/sites/game-client/ui/overlay-position.mjs';
      import ErrorModal from '/static/sites/game-client/ui/error-modal.mjs';

      // Export internal classes for ease of debugging.
      let gameClass = {};
      gameClass.GameMap = GameMap;
      gameClass.GraphicAsset = GraphicAsset;
      gameClass.GameState = GameState;
      gameClass.GameClient = GameClient;
      gameClass.ClientExtensionManager = ClientExtensionManager;
      gameClass.MainUI = MainUI;
      gameClass.OverlayPosition = OverlayPosition;
      window.gameClass = gameClass;

      // Create the various essential game classes.
      let game = {};
      window.game = game;

      function getTokenFromDocument() {
        try {
          const token = document.cookie
              .split('; ').find(row => row.startsWith('token='))
              .split('=')[1];
          return token;
        } catch (e) {
          return '';
        }
      }

      async function gameMain(game) {
        game.io = window.io;

        // WARNING: The following is developer mode only.
        // Try to get a test token.
        let testToken = getTokenFromDocument();
        if (testToken == '') {
          testToken = await $.ajax({url: ("<%= gatewayAddress %>" ? "//<%= gatewayAddress %>" : "") + "/get_test_token", type: "GET",});
          testToken = testToken.token;
        }
        game.token = testToken;

        game.mainUI = new MainUI();

        // TODO: Change map URL to follow the config in server side.
        game.mapData = await $.ajax({url: "/static/run/map/map.json", type: "GET",});
        game.assetData = await $.ajax({url: "/static/run/map/assets.json", type: "GET",});
        game.extensionList = await $.ajax({url: "/list_extensions", type: "GET",});

        game.graphicAsset = new GraphicAsset(game.assetData);
        if (await game.graphicAsset.loadAssets() == false) {
          console.error('error on loadAssets(), cannot start game');
          return;
        }
        game.map = new GameMap(game.graphicAsset, game.mapData);
        game.gameState = new GameState(game.map);
        game.socketURL = ("<%= gatewayAddress %>" || "");
        game.socket = game.io(game.socketURL, {reconnection: false});

        game.extMan = new ClientExtensionManager(game.socket, game.extensionList);
        game.mapRenderer = new MapRenderer(document.querySelector('#mapcanvas'), game.map, game.gameState);
        game.inputManager = new InputManager(game.mapRenderer);
        game.gameClient = new GameClient(game.socket, game.map, game.gameState, game.mapRenderer, game.inputManager, game.extMan, game.mainUI);

        game.gameClient.initialize(game.token);
        game.mapRenderer.setGameClient(game.gameClient);

        await game.extMan.initialize(game.map, game.gameState, game.gameClient, game.inputManager, game.mapRenderer, game.mainUI);
        await game.extMan.loadAllExtensionClient();

        // Initializes the UI.
        game.mapRendererOverlay = new MapRendererOverlay(game.mainUI);
        game.mapRendererOverlay.show(OverlayPosition.MAIN_VIEW);

        game.mainUI.errorModal = new ErrorModal(game.mainUI);

        game.mainUI.createContextMenu(game.gameState, game.mapRenderer, game.gameClient);

        window.dispatchEvent(new CustomEvent(
          'uiReady', {
            detail: {mainUI: game.mainUI},
          },
        ));

        function onGameTick () {
          game.mapRenderer.draw();
          requestAnimationFrame(onGameTick);
        }

        requestAnimationFrame(onGameTick);
      }

      gameMain(game);

    </script>
  </body>
</html>
