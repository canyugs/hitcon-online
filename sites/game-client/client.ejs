<!doctype html>
<!--
Copyright 2021 HITCON Online Contributors
SPDX-License-Identifier: BSD-2-Clause
-->

<!--
NOTE: The URL of this page is /client.html
It is recommended that all references various resources be in
absolute URL.
-->

<html lang="zh-tw">
  <head>
    <meta charset="utf-8">
    <title>HITCON Online</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.2/socket.io.min.js" integrity="sha512-2ho+gY0H62N4Z9oxD422L2ZYXiOMq9l+Aub1QNz4Z4UDOtDVxz4vk6O6R3Hqqc9Y7qSvZFl7cy3+eZ/ITnUrLA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/js-xss/0.3.3/xss.min.js" integrity="sha512-M9w45qyI/KVHcxTODUsdwWip284UJBj2e6st1Ub6tXXO4nJAP3aIVN2Wkgd15CmJL6eJRFBSUssVyKtZX1v1Fg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <%- include(headerContent); %>
  </head>
  <body data-clienttype="<%- clientType %>">
    <%- include(bodyContent); %>

    <script type="module">
      import ClientBot from '/static/sites/game-client/client-bot.mjs';
      import {MapCoord, GameMap} from '/static/common/maplib/map.mjs';
      import GraphicAsset from '/static/common/maplib/graphic-asset.mjs';
      import GameState from '/static/common/gamelib/game-state.mjs';
      import GameClient from '/static/sites/game-client/game-client.mjs';
      import MapRenderer from '/static/sites/game-client/map-renderer.mjs';
      import InputManager from '/static/sites/game-client/input-manager/input-manager.mjs';
      import {MovementManagerClient} from '/static/common/gamelib/movement-manager.mjs';
      import ClientExtensionManager from '/static/common/extlib/client-extension-manager.mjs';
      import MainUI from '/static/sites/game-client/ui/main-ui.mjs';
      import MapRendererOverlay from '/static/sites/game-client/ui/map-renderer-overlay.mjs';
      import LoadingScreenPage from '/static/sites/game-client/ui/loading-screen.mjs';
      import AvatarSelectionPage from '/static/sites/game-client/ui/avatar-selection.mjs';
      import OverlayPosition from '/static/sites/game-client/ui/overlay-position.mjs';
      import ErrorModal from '/static/sites/game-client/ui/error-modal.mjs';
      import IntroModal from '/static/sites/game-client/ui/intro-modal.mjs';
      import UserOverlay from '/static/sites/game-client/ui/user-overlay.mjs';

      // Export internal classes for ease of debugging.
      let gameClass = {};
      gameClass.GameMap = GameMap;
      gameClass.GraphicAsset = GraphicAsset;
      gameClass.GameState = GameState;
      gameClass.GameClient = GameClient;
      gameClass.ClientExtensionManager = ClientExtensionManager;
      gameClass.MainUI = MainUI;
      gameClass.OverlayPosition = OverlayPosition;
      gameClass.MapCoord = MapCoord;
      window.gameClass = gameClass;

      // Create the various essential game classes.
      const game = window.game = {};

      game.clientType = '<%- clientType %>';

      // Prepare the query parameters.
      const urlSearchParams = new URLSearchParams(window.location.search);
      const query = Object.fromEntries(urlSearchParams.entries());
      window.query = query;

      function getTokenFromDocument() {
        try {
          const token = document.cookie
              .split('; ').find(row => row.startsWith('token='))
              .split('=')[1];
          return token;
        } catch (e) {
          return '';
        }
      }

      async function getTestToken() {
        const scopeStr = query.scope?query.scope:'';
        let scope = scopeStr.split('|')
          .concat(['point_system',]).filter(x => x);
        try {
          const testToken = await $.ajax({
            url: ("<%= gatewayAddress %>" ? "//<%= gatewayAddress %>" : "") + "/get_test_token",
            data: {"scope": scope.join('|')},
            type: "GET",
          });
          return testToken.token;
        } catch (e) {
          console.log('Failed to fetch test token: ', e);
          return '';
        }
      }

      async function gameMain(game) {
        // Loading screen will always show first.
        game.loadingScreenPage = new LoadingScreenPage();

        game.io = window.io;

        // WARNING: The following is developer mode only.
        // Try to get a test token.
        let testToken = getTokenFromDocument();
        if (testToken == '' || query.scope || query.skipCookieToken) {
          // If we've query.scope, then we might need to update the testToken.
          testToken = await getTestToken();
        }
        game.token = testToken;

        game.mainUI = new MainUI(game.clientType);
        game.mainUI.errorModal = new ErrorModal(game.mainUI);
        game.mainUI.introModal = new IntroModal(game.mainUI);
        game.mapRendererOverlay = new MapRendererOverlay(game.mainUI);
        game.mainUI.mapRendererOverlay = game.mapRendererOverlay;
        game.mainUI.userOverlay = new UserOverlay(game.mainUI);

        // TODO: Change map URL to follow the config in server side.
        game.mapData = await $.ajax({url: "/static/run/map/map.json", type: "GET",});
        game.assetData = await $.ajax({url: "/static/run/map/assets.json", type: "GET",});
        game.extensionList = await $.ajax({url: "/list_extensions", type: "GET",});

        game.graphicAsset = new GraphicAsset(game.assetData);
        if (await game.graphicAsset.loadAssets() == false) {
          console.error('error on loadAssets(), cannot start game');
          return;
        }
        game.map = new GameMap(game.graphicAsset, game.mapData);
        game.gameState = new GameState(game.map, true);
        game.socketURL = ("<%= gatewayAddress %>" || "");
        game.socket = game.io(game.socketURL, {reconnection: false});

        game.extMan = new ClientExtensionManager(game.socket, game.extensionList, game.clientType);
        game.mapRenderer = new MapRenderer(document.querySelector('#mapcanvas'), document.querySelector('#backgroundcanvas'), document.querySelector('#foregroundcanvas'), document.querySelector('#outofboundcanvas'), document.querySelector('#inputcanvas'), game.map, game.gameState);
        if (window.query.disableRender) {
          game.mapRenderer.disableRenderForTesting();
        }

        game.avatarSelectionPage = new AvatarSelectionPage(game.graphicAsset);
        game.inputManager = new InputManager(game.mapRenderer, true);
        game.movementManager = new MovementManagerClient(game.socket, game.gameState, game.inputManager, game.mapRenderer);
        game.gameClient = new GameClient(game.socket, game.map, game.gameState, game.mapRenderer, game.inputManager, game.movementManager, game.extMan, game.mainUI, game.avatarSelectionPage, game.loadingScreenPage);

        if (window.query.test === 'type1'){
          window.addEventListener('previousData', (evt) => {
            let displayChar = evt.detail.displayChar;
            let displayName = evt.detail.displayName;
            if (!displayName) displayName = evt.detail.playerID;
            if (!displayChar) displayChar = null;
            game.avatarSelectionPage.autoSubmit(displayName, displayChar);
            setTimeout(() => {
              game.clientBot = new ClientBot(game.mapRenderer);
            }, 3000);
          });
        }

        game.gameClient.initialize(game.token);
        game.mapRenderer.setGameClient(game.gameClient);

        await game.extMan.initialize(game.map, game.gameState, game.gameClient, game.inputManager, game.mapRenderer, game.mainUI);
        await game.extMan.loadAllExtensionClient();

        game.mainUI.createContextMenu(game.gameState, game.mapRenderer, game.inputManager, game.gameClient);

        window.dispatchEvent(new CustomEvent(
          'uiReady', {
            detail: {mainUI: game.mainUI},
          },
        ));

        // Ruler helper utility.
        if (window.query.ruler === 'true') {
          game.mainUI.enableRuler();
        }

        function onGameTick () {
          game.mapRenderer.draw();
          requestAnimationFrame(onGameTick);
        }

        requestAnimationFrame(onGameTick);
      }

      gameMain(game);

    </script>
  </body>
</html>
